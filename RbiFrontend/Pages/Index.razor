@page "/"

@inject RecipeSource _recipeSource
@inject Auth _auth

<PageTitle>Index</PageTitle>

@if (_errorText != null)
{
	<ClientError Text=@_errorText />
}
else
{
	<div class="vstack gap-4">
		<div>
			<div class="btn-group">
				<input @onchange="() => _searchBy = SearchBy.Tags" type="radio" class="btn-check" name="search-by" id="search-by-tags-radio" checked>
				<label class="btn btn-outline-primary" for="search-by-tags-radio">Search by tags/ingredients</label>

				<input @onchange="() => _searchBy = SearchBy.Name" type="radio" class="btn-check" name="search-by" id="search-by-name-radio">
				<label class="btn btn-outline-primary" for="search-by-name-radio">Search by title</label>
			</div>
		</div>
		<div class="vstack gap-2">
			@if (_searchBy == SearchBy.Tags)
			{
				<TagInput Tags=_recipeSearch.TagNames />
			}
			else
			{
				<div class="row">
					<div class="col-auto">
						<input @bind=_recipeSearch.Name class="form-control" />
					</div>
				</div>
			}
			<div class="form-check">
				<input class="form-check-input" type="checkbox" id="include-public"
					@bind=_recipeSearch.IncludePublicRecipes>
				<label class="form-check-label" for="include-public">
					Include public recipes
				</label>
			</div>
			<div>
				<button class="btn btn-primary" @onclick=Search>Search</button>
			</div>
		</div>
		<div>
			@if (_loading)
			{
				<Loading />
			}
			else if (_results != null)
			{
				<RecipeList Recipes=_results />
			}
		</div>
	</div>
}




@code {
	enum SearchBy
	{
		Tags,
		Name
	}

	private SearchBy _searchBy = SearchBy.Tags;
	private IEnumerable<RecipeDto>? _results = null;

	private RecipeSearch _recipeSearch = CreateRecipeSearch();

	private bool _loading = false;
	private string? _errorText = null;

	private async Task Search()
	{
		var rs = new RecipeSearch
			{
				UserId = _auth.User.Id,
				IncludePrivateRecipesOfUser = true,
				IncludePublicRecipes = _recipeSearch.IncludePublicRecipes
			};

		if (_searchBy == SearchBy.Tags)
		{
			rs.TagNames = _recipeSearch.TagNames.Any(t => !String.IsNullOrEmpty(t)) ? _recipeSearch.TagNames : null;
		}
		else if (_searchBy == SearchBy.Name)
		{
			rs.Name = _recipeSearch.Name;
		}

		_loading = true;
		_results = await _recipeSource.Search(rs);
		_loading = false;

		rs = CreateRecipeSearch();
	}

	private static RecipeSearch CreateRecipeSearch()
	{
		return new RecipeSearch
			{
				TagNames = new List<string>(),
				IncludePrivateRecipesOfUser = true,
				IncludePublicRecipes = true
			};
	}

}
