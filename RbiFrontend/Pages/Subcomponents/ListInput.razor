@typeparam TItem where TItem : new()

<div>
	<div class="d-inline-flex @(Horizontal ? "hstack flex-wrap" : "vstack") align-items-center gap-3">
	@for (int i = 0; i < Items.Count(); i++)
	{
		var iCopy = i;

			@if (Ordered)
			{
			<button @onclick="() => Add(iCopy)" type="button" class="btn btn-secondary"><span class="oi oi-plus"></span></button>
			}
			<div class="hstack gap-2">
				@if (Ordered)
				{
				<div class="btn-group-vertical">
					<button class="btn btn-sm btn-outline-secondary" type="button"><span class="oi oi-caret-top"></span></button>
					<button class="btn btn-sm btn-outline-secondary" type="button"><span class="oi oi-caret-bottom"></span></button>
				</div>
				}
				@ItemTemplate(Items[i])
				<div>
					<button type="button" class="btn btn-outline-secondary"
							@onclick="() => Remove(iCopy)">
						<span class="oi oi-trash"></span>
					</button>
				</div>
			</div>
	}
	<div>
		<button @onclick=Add type="button" class="btn btn-secondary"><span class="oi oi-plus"></span> Add</button>
	</div>
</div>
</div>

@code {
	[Parameter]
	public bool Ordered { get; set; } = true;

	[Parameter]
	public bool Horizontal { get; set; }

	[Parameter]
	public List<TItem> Items { get; set; } = null!;

	[Parameter]
	public RenderFragment<TItem> ItemTemplate { get; set; } = null!;

	private void Remove(int i)
	{
		Items.RemoveAt(i);
	}

	private void Add() => Add(Items.Count());

	private void Add(int i)
	{
		Items.Insert(i, new());
	}
}