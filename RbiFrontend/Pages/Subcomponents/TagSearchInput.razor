@using System.Linq.Expressions

@inject ILogger<TagSearchInput> _logger
@inject TagSource _tagSource

<div class="vstack gap-2">
	@for (int i = 0; i < Tags.Count; i++)
	{
		int iCopy = i;
		<div class="row g-2">
			<div class="col-auto">
				<input class="form-control"
		   tabindex=@(iCopy + 1)
				   @bind=Tags[iCopy]
				   @oninput="(e) => HandleChange(e.Value.ToString(), iCopy)"
		   maxlength="100"
		   list="tagDatalist"
		   placeholder="Name of ingredient or tag" />
			</div>
			@if (i < Tags.Count - 1)
			{
				<div class="col-auto">
					<button class="btn btn-secondary col-auto"
					@onclick="() => Remove(iCopy)" tabindex=@(Tags.Count + iCopy + 1)>
						<span class="oi oi-x"></span>
					</button>
				</div>
			}
		</div>
	}
</div>

<datalist id="tagDatalist">
	@foreach (var tag in _tagSuggestions)
	{
		<option>@tag.Name</option>
	}
</datalist>

@code {
	[Parameter]
	public List<string> Tags { get; set; }

	private IEnumerable<TagDto> _tagSuggestions = new List<TagDto>();

	private async Task HandleChange(string name, int i)
	{
		//Tags[i] = name;
		if (i == Tags.Count - 1 && name.Length > 0)
		{
			AddTag();
		}

		if (name.Length > 2)
		{
			_tagSuggestions = await _tagSource.Search(new { prefix = name });
		}
	}

	protected override void OnInitialized()
	{
		if (Tags.Count == 0)
		{
			AddTag();
		}
	}

	private void Remove(int i)
	{
		Tags.RemoveAt(i);
		if (Tags.Count == 0)
		{
			AddTag();
		}
	}

	private void AddTag()
	{
		Tags.Add(string.Empty);
	}
}