@page "/recipes/{Id:long}/{Name?}"

@inject RecipeSource _recipeSource
@inject Auth _auth
@inject UnitService _unitService

<PageTitle>Recipe</PageTitle>

@if (_recipe == null)
{
	<Loading />
}
else if (Edit)
{
	<EditRecipe Recipe="@_recipe" OnStopEditing=StopEditing/>
}
else
{
	<div class="vstack gap-4">
		<div class="border p-3 border-3 rounded">
			<div class="d-flex justify-content-between">
				<div class="vstack gap-2">
					<h1>@_recipe.Name</h1>
					<div class="hstack flex-wrap gap-2">
						@foreach (var tag in _recipe.Tags)
						{
							<div>#@tag.Name</div>
						}
					</div>
				</div>
				<div class="flex-grow-0 vstack gap-3">
					<div>
						@if (_recipe.User != null)
						{
						<div>Author: <a href="/user/@_recipe.User.Id">@_recipe.User.Username</a></div>
						}
						<div>@_recipe.CreationDate.ToDateString()</div>
					</div>
					@if (_recipe.User?.Id == _auth.User.Id)
					{

					<div><button @onclick=StartEditing class="btn btn-primary btn-lg">Edit</button></div>
					}
				</div>
			</div>
			<div>@_recipe.Description</div>
		</div>
		@if (_recipe.Servings != null)
		{
		<div class="row g-2 align-items-center">
			<div class="col-auto">
				<strong>Servings:</strong>
			</div>
			<div class="col-auto">
					<input type="number" min="1" class="form-control form-control-sm servings" @bind="_servings" />
			</div>
		</div>
		}
		<div class="row">
			<div class="col-xl-5">
				<h2>Ingredients</h2>
				<ul>
					@foreach (var ingredient in _recipe.Ingredients)
					{
						var (amount, unit) = GetAmountForIngredient(ingredient);
						<li>
							@amount @unit 
							@ingredient.Name
						</li>
					}
				</ul>
			</div>
			<div class="col-xl-1"></div>
			<div class="col-xl-6">
				<h2>Instructions</h2>
				<ol>
					@foreach (var instruction in _recipe.Instructions)
					{
					<li>@instruction.Text</li>
					}
				</ol>
			</div>
		</div>
	</div>
}


@code {
	[Parameter]
	public long Id { get; set; }
	[Parameter]
	public string? Name { get; set; }

	[Parameter]
	[SupplyParameterFromQuery]
	public bool Edit { get; set; }

	private RecipeDetailDto _recipe = null!;
	private int _servings;

	protected override async Task OnInitializedAsync()
	{
		_recipe = await _recipeSource.Get(Id);
		if(_recipe.Servings != null)
		{
			_servings = (int) _recipe.Servings;
		}
	}

	private void StartEditing()
	{
		Edit = true;
	}

	private void StopEditing()
	{
		Edit = false;
	}

	private (float?, string?) GetAmountForIngredient(IngredientDto ingredient)
	{
		float? amount = ingredient.Amount;
		string? unit = ingredient.AmountUnit;
		if (amount != null)
		{
			if (_recipe.Servings != null)
			{
				amount *= _servings / (float)_recipe.Servings;
			}
			if (unit != null)
			{
				(amount, unit) = _unitService.GetSuitableAmount((float)amount, unit);
			}
		}
		return (amount, unit);
	}
}