@page "/create-recipe"

@inject RecipeSource _recipeSource
@inject NavigationManager _navigationManager;
@inject UnitService _unitService;

<EditForm Model="@Recipe" OnValidSubmit="@SaveRecipe">
	<div class="vstack gap-4">
		<div class="hstack gap-3">
			<button type="button" @onclick=StopEditing class="btn btn-lg btn-outline-secondary">View recipe</button>
			<button class="btn btn-primary btn-lg">Save</button>
		</div>

		<InputText @bind-Value=Recipe.Name class="form-control" placeholder="Title" />
		<InputTextArea @bind-Value=Recipe.Description class="form-control" placeholder="Description" />

		<div>
			<h2>Tags</h2>
			<ListInput Ordered="false" Horizontal="true" Items="Recipe.Tags" Context="tag">
				<ItemTemplate>
					<InputText @bind-Value=tag.Name class="form-control" />
				</ItemTemplate>
			</ListInput>
		</div>

		<div>
			<h2>Ingredients</h2>
			<ListInput Items="Recipe.Ingredients" Context="ingredient">
				<ItemTemplate>
					<div class="row g-2">
						<div class="col-auto"><InputText @bind-Value=ingredient.Name class="form-control" placeholder="Ingredient" /></div>
						<div class="col-auto"><InputNumber @bind-Value=ingredient.Amount class="form-control amount" placeholder="Amount" /></div>
						<div class="col-auto">
							<InputSelect @bind-Value=ingredient.AmountUnit class="form-select unit">
								<option></option>
								@foreach (var symbol in _unitService.AvailableUnitSymbols)
								{
									<option>@symbol</option>
								}
							</InputSelect>
						</div>
					</div>
				</ItemTemplate>
			</ListInput>
		</div>

		<div>
			<div class="hstack gap-3">
				<button type="button" @onclick=StopEditing class="btn btn-lg btn-outline-secondary">View recipe</button>
				<button class="btn btn-primary btn-lg">Save</button>
			</div>
			<div class="form-text">Unsaved changes will be lost on page refresh.</div>
		</div>
	</div>
</EditForm>

<div class="position-absolute bottom-0">
	@for (int i = 0; i < _successCount; i++)
	{
		<div class="alert alert-success">
			Successfully saved the recipe.
		</div>
	}
</div>

@code {
	[Parameter]
	public RecipeDetailDto Recipe { get; set; } = null!; //always not null after OnInitialized

	[Parameter]
	public EventCallback OnStopEditing { get; set; }

	private RecipeDetailDto _oldRecipe = null!;
	private RecipeCreationDto _oldCreationDto = null!;
	private int _successCount = 0;

	protected override void OnInitialized()
	{
		if (Recipe == null)
		{
			Recipe = new RecipeDetailDto { Name = "" };
		}
		_oldRecipe = new RecipeDetailDto(Recipe);
		_oldCreationDto = ExtractCreationDto();
	}

	private async Task SaveRecipe()
	{
		var creationDto = ExtractCreationDto();
		if (Recipe.Id == 0)
		{
			Recipe = await _recipeSource.Insert(creationDto);
			_navigationManager.NavigateTo($"/recipes/{Recipe.Id}");
		}
		else if (!creationDto.Equals(_oldCreationDto))
		{
			await _recipeSource.Update(Recipe.Id, creationDto);
		}

		_oldRecipe = new RecipeDetailDto(Recipe);
		_oldCreationDto = creationDto;

		_successCount++;
		await Task.Delay(3000).ContinueWith((t) => _successCount--);
	}

	private RecipeCreationDto ExtractCreationDto()
	{
		//AutoMapper could be used
		return new RecipeCreationDto()
		{
			Name = Recipe.Name,
			IsPublic = Recipe.IsPublic,
			Description = Recipe.Description,
			PrepTimeMins = Recipe.PrepTimeMins,
			CookTimeMins = Recipe.CookTimeMins,
			Servings = Recipe.Servings,
			Tags = Recipe.Tags,
			Ingredients = Recipe.Ingredients
		};
	}

	private void StopEditing()
	{
		OnStopEditing.InvokeAsync();
	}
}
